apiVersion: v1
kind: ConfigMap
metadata:
  name: go-env-config #HARUS SAMA DENGAN BAGIAN TEMPLATE.SPEC.CONTAINER.ENVFROM.CONFIGMAPREF.NAME (#VIN26)
data:
  APPLICATION: My Cool Application

---
apiVersion: v1
kind: Secret
metadata:
  name: go-env-secret #HARUS SAMA DENGAN BAGIAN TEMPLATE.SPEC.CONTAINER.ENVFROM.SECRETREF.NAME (#VIN27)
stringData: #untuk data plain string
  VERSION: 1.0.0
# data: kalau mau data biasa (mungkin yg kyk configMap)
#   ENVKEY: base64(VALUE) #base64nya manual terus copas

---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: go-env
spec:
  replicas: 3
  selector:
    matchLabels:
      name: go-env #JANGAN LUPA INI HRS SAMA DGN TEMPLATE.METADATA.LABELS(VIN#23)
  template: #TEMPLATE UNTUK POD
    metadata:
      name: go-env
      labels:
        name: go-env #BAGIAN YANG PENTING > LABELNYA || HARUS SAMA JUGA DENGAN SPEC.SELECTOR.MATCHLABELS(VIN#23)
    spec:
      containers:
        - name: go-env
          image: vincen320/go-env
          ports:
            - containerPort: 3000
          envFrom: #BEDA DSINI JIKA PAKAI CONFIGMAP (bisa lebih dari 1)
            - configMapRef:
                name: go-env-config #HARUS SAMA DENGAN metadata.name Configmap (#VIN26)
            - secretRef: #TAMBAH INI UNTUK SECRET (bisa lebih dari 1)
                name: go-env-secret #HARUS SAMA DENGAN metadata.name Secret (#VIN27)

---
apiVersion: v1
kind: Service
metadata:
  name: go-env-service
spec:
  type: NodePort
  selector:
    name: go-env # JANGAN LUPA INI HARUS SAMA DENGAN LABEL POD
  ports:
    - port: 3000 #PORT buat servicenya
      targetPort: 3000 #PORT UNTUK AKSES PODNYA, jadi akses ke servicenya yaitu 8080 tapi nanti si service akan ngeakses ke port 80 di pod yang ditujunya(contohnya di nginx jalan di port 80 jadi diarahkan kesana)
      nodePort: 30001 #jangan lupa tambahin ini, port yang diekspos oleh node(dalam hal ini minikube), node bisa berupa vm
#catatan targetPort lanjutan diatas: Ingat karena service seperti gerbang/gateway, jadi si service harus ngeakses suatu POD
